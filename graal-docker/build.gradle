plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.13.0"

}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    compile localGroovy()
}

group = 'org.ethelred'
version = '0.2'

gradlePlugin {
    // Define the plugin
    plugins {
        graalDocker {
            id = 'org.ethelred.graal.in.docker.plugin'
            implementationClass = 'org.ethelred.graal.in.docker.plugin.MyNativePlugin'
            displayName = "Run graal native-image in a docker"
            description = "Run graal native-image in a docker"
        }
    }
}

pluginBundle {
    website = 'https://github.com/edward3h/graal-in-docker-plugin'
    vcsUrl = 'https://github.com/edward3h/graal-in-docker-plugin'
    tags = ['graal', 'docker', 'native-image']
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
