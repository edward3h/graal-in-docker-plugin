plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.13.0"

}

repositories {
    mavenCentral()
}

// Add a source set for the functional test suite
def functionalTest = sourceSets.create('functionalTest')
def functionalTestTask = tasks.register('functionalTest', Test) {
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn functionalTestTask
}

dependencies {
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude(group: 'org.codehaus.groovy')
    }
    implementation 'org.codehaus.groovy:groovy-all:3.0.13'
    functionalTestImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude(group: 'org.codehaus.groovy')
    }
}

group = 'org.ethelred'
version = '0.8'

gradlePlugin {
    // Define the plugin
    plugins {
        graalDocker {
            id = 'org.ethelred.graal.in.docker.plugin'
            implementationClass = 'org.ethelred.graal.in.docker.plugin.MyNativePlugin'
            displayName = "Run graal native-image in a docker"
            description = "Run graal native-image in a docker"
        }
    }
    testSourceSets(sourceSets.functionalTest)
}

pluginBundle {
    website = 'https://github.com/edward3h/graal-in-docker-plugin'
    vcsUrl = 'https://github.com/edward3h/graal-in-docker-plugin'
    tags = ['graal', 'docker', 'native-image']
}

